org: ideamarket
app: lambdavatar
service: lambdavatar

plugins:
  - serverless-plugin-typescript
  - serverless-s3-local
  - serverless-offline-env
  - serverless-offline
  - serverless-prune-plugin

custom:
  serverless-offline-env:
    path: .env
  serverless-offline:
    noPrependStageInUrl: true
    noTimeout: true
    port: 3000
    host: localhost
  s3:
    port: 8000
    directory: /tmp
  prune:
    automatic: true
    number: 3
  bucket: ${file(env.${opt:stage, self:provider.stage}.json):S3BUCKETNAME}

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    IMAGE_WIDTH: ${file(env.${opt:stage, self:provider.stage}.json):IMAGE_WIDTH}
    IMAGE_MAX_AGE: ${file(env.${opt:stage, self:provider.stage}.json):IMAGE_MAX_AGE}

    S3_BUCKET: ${self:custom.bucket}
    S3_ENDPOINT: ${file(env.${opt:stage, self:provider.stage}.json):S3ENDPOINT}
    S3_ACCESS_KEY: ${file(env.${opt:stage, self:provider.stage}.json):S3ACCESSKEYID}
    S3_SECRET_ACCESS_KEY: ${file(env.${opt:stage, self:provider.stage}.json):S3SECRETACCESSKEY}

    PROXY_HOST: ${file(env.${opt:stage, self:provider.stage}.json):PROXY_HOST}
    PROXY_PORT: ${file(env.${opt:stage, self:provider.stage}.json):PROXY_PORT}
    PROXY_AUTH: ${file(env.${opt:stage, self:provider.stage}.json):PROXY_AUTH}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:PutObjectAcl
      Resource:
        - 'arn:aws:s3:::${self:custom.bucket}'
functions:
  main:
    handler: src/main.default
    events:
      - http:
          path: /{provider}/{username}
          method: get
          request:
            parameters:
              paths:
                id: true
      - s3:
          bucket: ${self:custom.bucket}
